#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <graphics.h>
#include <iostream>
#include <math.h>
#include <sstream>


using namespace std;


int printTree(int koor1, int koor2, char* array,
			int index,
			int total_elements)
{

	if (index >= total_elements)
		return NULL;


	ostringstream str1;
	str1 << array[index];

	string str2 = str1.str();
	char* str = &str2[0u];


	setcolor(BLUE);


	circle(koor1, koor2, 20);
	floodfill(koor1, koor2,BLUE);




	setcolor(BLUE);


	int left = 2 * index + 1;
	int right = 2 * index + 2;


	printTree(koor1 - koor2 / (index + 1), koor2 + 50,
			array, left, total_elements);

	printTree(koor1 + koor2 / (index + 1), koor2 + 50,
			array, right, total_elements);


	if (left < total_elements) {
		line(koor1, koor2, koor1 - koor2 / (index + 1), koor2 + 50);
	}

	if (right < total_elements) {
		line(koor1, koor2, koor1 + koor2 / (index + 1), koor2 + 50);
	}


    setcolor(GREEN);

	circle(150, 100, 20);
	floodfill(150, 100, GREEN);
    line(300,150,150,100);

    circle(450, 100, 20);
	floodfill(450, 100, GREEN);
	line(300,150,450,100);




	outtextxy(200,118,"bxac");
	outtextxy(146,88,"3");
	outtextxy(375,116,"c");
	outtextxy(200,176,"xa");
	outtextxy(200,216,"c");
	outtextxy(245,240,"4");
	outtextxy(448,88,"6");
	outtextxy(92,220,"bxac");
	outtextxy(46,240,"1");
	outtextxy(375,172,"a");
	outtextxy(401,217,"bxac");
	outtextxy(380,240,"2");
	outtextxy(480,217,"c");
	outtextxy(515,240,"5");


    settextstyle(3,HORIZ_DIR,1);
    outtextxy(285,145,"KÃ–K");




	return NULL;
}

int katarbul(char *a1,char *xkatar,int value,int value2)
{
    int i=0;
    int j=0;
    int k=0;
    int n=-1;
	while(i<(value-value2))
{
        j=0;
		k=i;
		n=1;

    while(j<value2)
{
if(a1[k]!=xkatar[j]){

     n=0;
     break;
}

     j++;
     k++;
}

if(n==1)

     return i;
     i++;
}
     return -1;
}
int main(){


    char a1[50];
    char a2[50];

    char *str;
    char*str1;

    FILE *ptr;
    ptr=fopen("katar.txt","w");

    printf("Katari giriniz: ");
    scanf("%s",&a1);

    printf("\n");

    fprintf(ptr,"%s",a1);
    fclose(ptr);

    for(int f=0;f<100;f++){}

    fopen("katar.txt","r");



    strcpy(a2,a1);

    str=a1;

    char suffix[strlen(a1)][50];

     int i;
     int k;

    for(i=0;i<strlen(a1);i++){

    strcpy(suffix[i],str+i);


    }
    int value=strlen(a1);

    printf("Girilen katarin sonekleri:\n\n");

    for(i=0;i<strlen(a1);i++){
        printf("%s",suffix[i]);
        printf("\n");
    }

    char prefix[strlen(a1)][50];

    printf("\n\n");

    for(i=0;i<strlen(a1);i++){

    for(k=0;k<=i;k++){
     prefix[i][k]=a1[k];
   }
   prefix[i][k]='\0';
    }

       printf("\n");



       for(i=0;i<strlen(a2)+strlen(a1);i++){

        strcpy(prefix[i],a2);
        a2[strlen(a2)-1]='\0';

    }

       printf("Girilen katarin onekleri:\n");

        for(i=0;i<value;i++){
            printf("\n%s",prefix[i]);
        }

        printf("\n\n\n");

     int temp=1;

     for(i=1;i<value;i++){

    if(strcmp(suffix[i],prefix[i])==0){

    temp=0;
    break;


    }
     }

if(temp==0){

printf("Girilen katar icin suffix tree olusturulamaz.\n\n\n");
}
else{

printf("Girilen katar icin suffix tree olusturulabilir.\n\n\n");

}

    char xkatar[50];

    printf("Aradiginiz katari giriniz: ");
    scanf("%s",&xkatar);

    printf("\n\n");

    int value2=strlen(xkatar);
    int sayi=katarbul(a1,xkatar,value,value2);
    int j;
	int number1=0;
	int number2=0;

    for (i=0;i<value;i++)
{
     number2=0;
    for(k=0;k<value;k++)
{

    for(j=0;j<value2;j++)
{
if(a1[k+j]==xkatar[j])
{
     number1++;
}
else
{
     number1=0;
}
}
if(number1==value2)
{
     number2++;
}
}
     number1=0;
}
if(sayi==-1)
{
printf("Aradiginiz katar (a1) katari icerisinde bulunmamaktadir\n\n");
}
else
{
printf("Aradiginiz katar (a1) katarinin %d. karakterinden baslayan soneginin %d. karakterinde sonlanan onegidir.\n\n",sayi+1,value2);

printf("\nAranilan katardan %d adet bulunmaktadir.",number2);

}

	printf("\n\n");


	char person;
	char keep;
	int o;

	int nlittle=0;
	int little=0;
	int min=0;
	int max=0;

	for(j=0;j<value;j++)
{
    	max=min;
        nlittle=0;
    	person=a1[j];
    for(o=0;o<value;o++)
{
if(person==a1[o])
{
        nlittle++;
}
}
		min=nlittle;
if(min>=max)
{
        little=nlittle;
        keep=person;
}
}

   	printf("\nEn cok tekrar eden altkatar %c, %d defa tekrar ediyor\n",keep,little);


    printf("\n");

    int ind,a,y;
    int n=2,n_number=0,strsayac=0;
    int xenb,xmax=0,xmin=0,enb;

	max=0;

	int x=0;
	min=0;


    char tall[20];
    for(n=2;n<7;n++)
{
    for (x=0;x<5;x++)
{

    char underqatar[n];
    for(i=0;i<n;i++)
{
    underqatar[i]=a1[i+x];
}
    for(i=0;i<19;i++)
{
    max=min;
    for(int j=0;j<n;j++)
{
if(a1[i+j]==underqatar[j])
{
    n_number++;
}
else
{
    n_number=0;
}
}
if(n_number==n)
{
    strsayac++;
}
    min=strsayac;
if(max<min)
{
    xenb=min;

}
    n_number=0;
    xmax=xmin;
    xmin=xenb;
if(xmax<xmin)
{
    enb=xmin;
    for(a=0;a<n;a++)
{
    tall[a]=underqatar[a];
}
    ind=n;
}

}

    strsayac=0;
}
}
    printf("\n");
    for(i=0;i<ind;i++)
    {
        printf("%c",tall[i]);
    }
    printf(",  a1 katarinin altkatari en cok tekrar eden en uzun altkatardir. %d defa tekrar etmistir \n",enb);


	int gd = DETECT, gm;
	initgraph(&gd, &gm, "None");


	char array[] = { 'x','a','b','c'};


	printTree(300, 150, array, 0, 7);
	getch();


	closegraph();





        return 0;
}
